# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
  - name: pool
    displayName: Agent Pool
    type: string
    default: 'Default'
    values:
      - 'Default'
  - name: mode
    displayName: 'Planning Mode'
    type: string
    default: 'create'
    values:
      - 'create'
      - 'destroy'
      - 'refresh-only'

trigger: none

variables:
  - name: mode
    value: ${{ parameters.mode }}
  - ${{ if ne(parameters.mode, 'create') }}:
      - name: option
        value: strcat("-", lowercase(${{ parameters.mode }}))

stages:
  - stage: Create
    condition: and(succeeded(), eq(variables['mode'], 'create'))
    jobs:
      - job: Plan
        pool: ${{ parameters.pool }}
        steps:
          - script: terraform init
            displayName: 'Terraform Init'
          - script: terraform validate
            displayName: 'Terraform Validate'
          - script: terraform fmt -check
            displayName: 'Terraform Format Check'
          - script: terraform plan ${{ variables.option }}
            displayName: 'Terraform Plan'
      - deployment: Create
        dependsOn: Plan
        condition: and(succeeded() , ne(variables['mode'], 'destroy'))
        pool: ${{ parameters.pool }}
        environment: 'Dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: terraform apply -auto-approve
                  displayName: 'Terraform Apply'
                - script: terraform output
                  displayName: 'Terraform Output'
                - script: terraform show
                  displayName: 'Terraform Show'
                - script: terraform state list
                  displayName: 'Terraform State List'
                - script: terraform state show module.rg.azurerm_resource_group.rg
                  displayName: 'Terraform State Show'
                - script: terraform state show module.rg.azurerm_resource_group.rg | jq -r '.outputs'
                  displayName: 'Terraform State Show Outputs'
      - deployment: Destroy
        dependsOn: Plan
        condition: and(succeeded() , eq(variables['mode'], 'destroy'))
        pool: ${{ parameters.pool }}
        environment: 'Dev'
        strategy:
          runOnce:
            deploy:
              steps:
                - script: terraform destroy -auto-approve
                  displayName: 'Terraform Destroy'
                - script: terraform output
                  displayName: 'Terraform Output'
                - script: terraform show
                  displayName: 'Terraform Show'
                - script: terraform state list
                  displayName: 'Terraform State List'
                - script: terraform state show module.rg.azurerm_resource_group.rg  | jq -r '.outputs'
                  displayName: 'Terraform State Show Outputs'

                
                
